local MAOZEDONG = [[
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⣠⣤⣼⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⠿⡻⢏⠽⣙⢏⡟⢯⢿⢿⡹⢿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣛⠭⣚⠬⣓⠱⣊⠷⣘⠮⡜⡭⢎⠧⡝⣎⡳⢮⡹⣏⠿⣽⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣟⠿⣧⡙⢦⡙⢤⡓⢬⠓⣌⠣⡍⢞⡱⣙⢮⣙⢮⡱⣍⡳⣙⢮⡻⣭⢿⣹⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣷⠿⢣⢄⡙⠦⡘⡰⢘⢢⡙⢤⡓⡹⢆⡳⢍⠶⣩⢖⡹⢦⡝⣭⢞⡵⣫⡞⣷⣻⢾⣽⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⡞⡀⠚⡀⠊⡐⢁⠂⢱⠈⡆⡘⣀⢃⢱⠊⣰⢉⡞⢁⣎⢱⢃⡞⢱⣎⢳⣷⢹⣷⣏⡟⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣇⠄⠑⡈⠰⢁⠎⡐⠡⠘⡄⢣⠘⡡⠜⡨⢆⠫⡔⢫⡔⣫⢌⡳⢎⡝⣳⢎⡷⣭⡟⣶⢯⣽⣻⣾⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⡡⠂⠉⠂⠁⠌⠐⠉⠢⠡⡔⣠⢁⠆⡑⠰⡈⠵⡘⣥⢚⡴⡩⢞⡱⡺⢥⡻⡼⣥⡻⣽⣞⣷⣻⣟⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣶⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⡏⡐⠡⠊⠄⠁⠀⠀⠀⠀⠀⠀⠀⠀⡉⠠⠀⢡⠘⡄⢓⡌⠲⣌⠵⣩⠖⣝⣣⠷⣹⠖⣽⣓⠾⣼⣳⣿⣻⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣱⣿⠐⠀⠁⢂⠐⠈⠀⠀⠀⠀⠀⠀⢄⠂⡐⠀⠈⠀⢃⢉⠒⡌⠓⡌⢯⢱⢫⡜⡖⣯⣓⡟⣶⡹⣟⡾⣽⣳⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢣⠱⣌⠒⠠⠁⠂⠀⠀⠀⠄⠀⠀⠀⠀⢌⡶⢠⠀⠀⠀⠀⠀⠃⠌⡱⠘⣌⢣⢏⡼⡹⢶⡹⣞⡲⣝⢾⣹⢷⡿⣟⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣡⠳⢌⠈⠐⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⢊⡓⢱⡿⠀⠀⠀⠀⠘⠠⠡⢍⠰⣃⠞⡴⣙⢧⡝⣮⢳⣟⢾⣹⣞⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣿⢒⠠⠈⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣂⠾⣿⡇⠀⠀⠀⠀⠀⢠⠁⡌⠰⡈⡽⣜⢭⡲⡝⣮⣳⣯⣿⢶⡿⣽⡷⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢿⣿⣿⣿⣿⣿⣿⡿⡸⢤⣃⢶⣿⣤⣧⣦⣤⣤⣤⣤⣤⣾⣥⣶⣄⠂⡅⠻⢤⡀⢀⣰⣬⣆⣥⣬⣷⣴⣶⣬⣦⣷⣿⣷⣿⣿⣿⣯⣟⣷⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⡗⣡⠳⣏⢞⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡖⡌⢱⣠⠑⣪⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣟⣿⣿⣿⣿⣿⣿⣽⡿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⡑⢧⣻⣾⢻⠿⠿⠿⠿⢻⢿⣿⣿⣿⡿⣿⣿⣿⣟⠠⢃⣽⣿⣼⣿⣿⣿⣿⣿⣿⡿⠿⣿⠟⡻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣿⣿⣿⡇⢞⡡⠛⠍⢂⠁⠀⢀⣠⣵⣾⣿⣷⣿⣶⣝⣫⡝⡁⠈⠁⢋⠿⣿⣿⣿⣿⡟⡁⢦⣡⣴⣾⣿⣶⣧⣶⣼⣳⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣟⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⣿⣿⠱⡂⠤⣁⡆⢤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢼⣄⠀⠀⡙⢦⣿⣿⣿⣷⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⡿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⣿⡟⣿⠗⡀⠌⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⢺⡏⠀⠀⡐⢮⣿⣿⣿⣿⣿⣿⣿⡿⠋⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣻⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠄⠰⣶⣾⠛⠉⠀⠈⠉⣩⣽⣿⣿⣿⣿⣿⡿⢡⣾⠇⠀⢀⠻⣔⢻⣿⣿⣷⡈⣹⣷⣤⣵⡘⢻⠿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡆⣿⡿⠀⡆⠀⠉⠁⣤⣄⣠⣶⣿⣿⣿⣿⣿⣿⡿⠋⠀⢂⡹⠌⠀⡀⠓⡬⢻⣿⣿⣿⣿⣤⠉⠛⠿⣿⣿⣿⣶⣿⣿⣿⣿⠿⣛⠦⡭⣍⢏⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⣟⣻⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠇⣿⡿⣆⡅⠀⠀⠀⠙⢛⣿⣿⣫⣿⣿⣿⠿⠋⠀⡤⢀⠠⡐⢀⠐⣈⠱⡘⣿⣿⣷⣏⣿⣿⣷⣯⣒⣥⣏⣶⣿⣿⡿⠛⢉⡐⢌⡳⣱⢞⡞⣾⣿⣿⣿⣷⡿⣿⣿⣿⣿⠾⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡆⣿⡇⠀⠛⠀⠀⠀⢿⣼⠻⠟⢻⠛⠉⠁⠀⢀⡴⡅⠀⠦⠙⡠⢂⠄⢣⣙⣿⣿⣿⣿⣒⠳⡬⢩⠝⣛⢫⡙⢍⠂⠄⠡⢀⡌⢢⡱⢣⡞⣽⣿⡿⣿⣿⣿⡿⣿⣿⣿⣿⣻⢼⣿⡿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⣿⡇⠐⣠⠀⠀⠀⠀⠙⠣⠀⠛⠀⠀⠀⢀⢋⣽⣷⢀⠎⠐⠀⢡⢊⡵⣺⣿⣿⣿⣿⣿⣅⠢⠡⠘⡄⠦⣑⢎⡘⡌⡱⢣⢌⠣⣜⢣⣟⣾⣿⡿⣽⣿⣿⣿⣿⣿⣿⣿⣻⢾⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡁⣿⡇⢌⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⣾⣿⠏⢿⠃⠀⠀⠢⡙⡜⣿⣿⣿⣿⣿⣿⣿⣦⠁⠊⡝⠰⡉⢎⠱⣌⢡⠃⣎⠵⣎⡟⣾⡿⣯⣟⣿⣽⣿⣿⣿⣿⣿⣿⣧⣋⢿⣿⣿⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣿⣷⠈⡄⢁⠠⣆⠀⠀⠀⠀⠀⢀⣵⣿⣿⣿⢋⡴⣾⣦⣤⣶⣦⣥⣸⣽⣿⣿⣯⢿⣻⣿⣿⣿⡀⠰⢡⠜⡢⠑⢤⢊⡵⢪⣝⡮⣝⣷⣻⢷⣻⣽⣿⣿⣿⣿⣿⣿⣿⣟⣷⢊⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠒⡌⢀⠂⠅⡀⠀⢀⠠⣞⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣷⣿⣿⣿⣷⡌⢢⠹⡔⡉⢆⡣⢞⣣⢿⣝⣾⣳⣯⡿⣟⣿⣽⣿⣿⣿⣿⣿⣿⣾⣹⣧⢻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡱⢌⠢⡘⠰⣀⢃⠦⣻⣿⣿⣿⡟⠁⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⢿⣿⡄⠱⢌⡱⣩⢞⡱⣏⡿⣞⣾⣳⣿⣻⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣇⢺⡱⢇⠣⡔⣻⣾⣿⣿⣿⠟⡁⠀⠀⠀⣿⣯⠉⠉⢭⣿⡛⠿⣿⣿⣽⣿⣯⣿⣻⢧⣯⣟⣿⣿⣅⠎⡴⣓⢮⡳⣭⢿⡽⣾⣽⡷⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣧⡗⡸⣌⠳⡨⢽⣿⣿⡿⣍⠚⠄⠂⠌⠐⠀⠄⠠⠀⣶⣿⡇⠀⢨⡙⡛⡟⡿⣿⣿⣿⣾⣼⣿⣿⣿⣎⠴⡻⣼⣹⢷⣯⣟⣷⣯⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⡧⡑⢞⡧⣙⣿⣿⣿⡹⣦⠉⡴⣄⡀⠂⠌⢠⠀⣀⣿⣿⠁⠀⢶⡷⡱⢹⡔⣣⢞⡽⣿⣿⣿⢿⣿⣿⣣⡝⣶⣻⣟⣾⣽⣾⣷⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣧⣻⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣧⠓⡜⠥⡛⣻⣿⣿⣅⢋⠆⡡⢻⣅⡒⣴⣨⣶⣿⣿⣿⣦⣶⣾⣷⣷⣮⣵⣫⢾⣵⣿⣿⣿⡞⣿⣿⣭⢳⣏⡿⣿⣿⣽⣯⣿⣿⣿⣾⢿⣻⣿⣿⣿⣿⣿⠿⡿⠿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⠱⡘⢆⡱⡜⠿⣿⣧⣎⣴⣵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣇⢻⡼⣳⢻⣿⣿⣿⣿⣿⣿⣻⣿⣻⣷⣿⣻⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣇⠹⣦⢷⢎⠱⡈⣿⣿⡿⡟⢻⣭⡽⠷⣷⣤⠀⠨⢭⣩⢏⡽⣬⣏⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⣎⢣⡽⣳⣿⣿⣿⡿⣯⢷⣻⣽⡷⣿⢯⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣱⠣⢎⡌⢆⡑⣾⣿⡇⠠⢀⢚⣿⣷⣮⣵⡾⣿⢿⣿⣮⣴⣿⣿⣿⣿⣿⣿⣿⡿⣟⡿⣻⢿⣿⡇⢎⣼⣿⣿⣿⣟⡿⣽⢯⣟⣾⣽⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣯⣗⠪⡜⡠⢞⣿⣿⡇⠱⡈⢆⡘⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⢷⣻⡝⡾⣽⣿⣿⠜⣸⣾⣿⣿⣻⢾⣽⢯⣟⣾⣟⣾⣿⣯⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⠦⣱⢡⣿⣿⡟⠤⢁⠘⠀⠌⢃⠧⡹⢿⡛⢿⡟⠛⠛⢿⣻⣿⠿⣿⣿⣯⣷⢻⣽⣻⣿⣯⡜⡹⣿⣟⡾⣽⢯⣟⣯⣿⡾⣿⣽⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣷⡢⣍⣿⡇⠜⡀⠂⠜⠀⡀⠈⠄⡁⠂⣍⢚⣻⣧⣾⣿⣿⡙⢮⠱⣘⡬⣷⣟⢮⡷⣻⣿⣷⣽⣿⣿⣽⣯⣿⢯⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣷⣼⣿⣏⢖⡡⢌⠀⢂⠐⡀⢂⠰⢡⢘⠢⣍⠹⣛⠻⡿⢃⢎⡱⣳⣿⡿⣭⣟⣾⣿⣿⣿⣿⣿⣻⣿⣷⣿⣿⣿⣻⣿⣿⣿⣿⣿⠇⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⣿⣿⣿⣿⣆⡃⢞⡠⢃⡜⣌⢳⡱⢮⢷⣮⣷⣍⠳⣌⠧⣎⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢰⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣶⣧⣳⡜⣬⣣⡝⣎⣳⣎⣽⡾⣟⣼⣳⣾⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣻⣿⣯⣿⣿⣿⣿⢿⣽⣾⡿⢁⣾⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣟⢻⣿⣿⣿⡿⣟⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⡿⣟⣯⣿⣿⣿⣽⣾⣿⢿⣿⣿⣻⢿⣯⣾⣿⡟⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣶⣿⠟⡜⣎⣿⡏⣿⣟⡾⣽⣻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣾⣿⣿⡿⣿⢿⣾⢿⣽⣾⢿⣻⡾⣽⣿⣿⣿⠟⣡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣶⡿⢿⡟⡻⢭⢭⣷⡻⡜⡰⣿⡇⢻⣿⣽⣶⣏⡿⣻⢿⣿⢿⡿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⢿⡿⣷⣿⡿⣿⣻⡿⣯⣟⣯⢷⣿⣿⣿⠟⢃⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣴⣶⣾⡿⣿⢛⡿⢫⡳⣍⠷⣎⡵⢫⣾⣿⣳⠹⡔⣿⣿⠀⢿⣿⣟⠾⣵⣻⢾⡽⣾⣽⣻⣿⣿⣿⣿⣿⣽⣿⣿⣻⣽⣿⢿⣟⣷⣿⣟⡷⣿⣳⢯⣿⣿⣿⠿⢁⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⢀⠤⣄⢲⣒⡟⡻⣍⢯⠽⣹⢶⡹⣜⢯⡜⣣⣝⡺⣝⢮⣗⠯⣾⡟⣧⢻⣱⣉⣿⣇⠘⢿⣿⣙⢮⡝⣯⢟⡷⣿⣿⣿⣿⣿⣷⣿⣿⣾⣟⣿⣯⣿⢿⣻⣿⢾⣯⣟⣷⣯⣿⣿⡟⢁⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢀⣀⡠⣄⠲⣞⢫⡓⣌⢎⡳⣎⠷⣎⡽⣳⡝⣾⣹⢧⣞⢷⡹⣞⢷⣳⣮⡳⣭⢿⡟⣼⣹⢾⡱⣏⢶⡱⡜⣻⣧⡈⠻⣿⣦⡛⣼⢫⡽⢯⣿⣿⣿⣿⣾⣿⢾⣟⣿⣯⣿⣯⣿⢿⣽⣻⣾⣿⣿⡿⠟⢁⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣀⡀⠀⠀⠀⠀⠀⠀⠀
⢚⡉⠶⡐⣌⠳⣌⡳⡜⣜⢮⣳⣽⠻⣜⡳⢧⣛⣮⢏⡷⣎⢷⡹⣜⣧⣳⢎⡷⣭⢿⣟⢦⣛⣯⢽⣫⢯⣗⡳⣌⠻⣷⣄⠘⢿⣷⣮⢳⣭⣛⡾⣽⢿⣿⣿⣾⣿⣻⣽⣟⡿⣷⢯⣿⣳⣿⡿⠟⣋⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣤⣄⡀⠀⠀
⠤⡙⢢⢓⡜⡳⢬⢳⡽⣎⢧⡓⣎⡟⡼⣝⢧⡻⣼⢫⡾⣽⢯⣻⣝⡶⣫⢟⣼⢣⣿⣿⢬⡳⢮⡷⣯⣛⠾⣝⣧⡛⣬⢻⣷⣀⠙⢿⣷⣶⣯⣽⢯⣟⣿⣿⣟⣿⢿⡿⣾⢻⣽⣿⡿⠟⢋⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦
⠣⡝⢎⡟⡼⣱⣋⢷⡹⣝⠲⡝⢮⡝⣳⡜⢮⡵⣯⢟⡽⢭⡻⢷⠾⣽⢳⡟⡾⣭⢿⣿⠮⣝⣫⢗⡧⣏⢿⣹⡶⣝⢶⣣⡛⢿⣶⡄⠉⠿⣿⣽⣯⣿⣿⣞⣿⣻⣯⣿⣿⡿⠟⣉⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣯⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⡑⢎⠻⣜⡱⢻⡜⣮⢳⡬⢳⡹⠶⣭⢳⢏⢧⡙⣎⡳⢞⡧⣟⣭⢻⡵⣫⢞⡵⣏⣿⣿⡷⣹⣎⠿⣾⡹⣎⣷⣻⣽⣳⡞⣭⣟⣮⢿⣷⣄⠉⠿⣿⣯⣷⣮⣷⠿⠟⠋⣁⣴⣾⡿⣛⢯⣛⣿⣿⣿⣿⣿⣿⣿⣯⣿⣟⣿⣯⣷⣿⣿⣟⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡿⣿⣻⢯⢿⣹⣏⢯⡟⣼⣣⢟
⡜⡬⣓⠦⣍⠧⡜⣦⢣⡝⢧⣹⣙⢮⢻⡜⣮⠱⣎⢿⡹⣜⡳⢮⡳⣝⢧⣻⢞⡵⣺⣿⣷⢣⣏⠿⣖⡿⡽⣶⣛⡶⣯⡟⣷⣻⢮⣗⡻⢻⣿⣦⣀⣹⡟⢋⣠⣶⣾⣿⣿⣿⣷⣻⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⢯⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡿⣽⣞⣯⣟⠷⣏⡿⣞⡵⣚⢧⣛⢶⡹⢎
⢜⡡⢏⠳⢎⡹⣘⢥⢫⡜⣣⠳⣏⣎⢷⡻⣖⡹⢮⡳⣝⢮⣽⡳⣝⢮⡳⡽⣎⢷⡳⢿⣿⡳⣎⢿⡹⣟⡵⣯⡽⣽⢶⣻⡳⢯⡟⣮⡝⡧⢎⡝⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣳⢯⡿⣽⢯⣟⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡾⣭⣟⣧⣟⡾⣭⢿⡹⣞⡵⣻⡝⣾⡹⣎⡗⣯
⢢⡑⢎⡍⢆⡳⣉⢎⡳⡜⣥⢳⡞⣼⢣⡛⡴⢫⢿⣱⢯⡷⢧⡻⣼⡳⣝⡳⡝⡾⣽⢻⣿⡿⣜⢯⡳⣝⡾⣵⢻⣜⢯⣳⡝⣯⣝⣶⡻⣱⡛⣼⣿⣿⣿⢾⣻⢿⣽⣻⣾⣽⣯⣿⢯⣟⣽⣻⢾⣽⡳⢯⣟⣳⢯⡞⣮⣽⡿⡟⢿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡿⣼⣹⣞⢷⣫⢾⡽⣺⠽⣎⢷⣣⢟⡶⣹⢧⡛⠶
⢦⡙⢎⡞⢧⠳⣍⢮⡵⣙⢦⡳⣚⢥⡳⣙⣷⣫⠾⣵⣏⢾⡳⣝⢧⡻⣜⡳⣝⡳⣽⢫⣿⣿⡝⣮⣽⣎⢷⣏⡿⣼⢫⣞⣽⡳⣞⣞⣷⡛⣴⣿⣿⣿⣿⣾⣿⣿⣯⣷⣻⢯⣟⣾⣻⣞⣧⣟⡳⣞⡽⣫⣞⣧⢿⣼⣷⡿⢳⣼⣿⣿⣿⣿⡿⣿⣟⡿⣟⣿⣻⣟⡿⣽⣾⣛⣾⡹⣞⣵⡳⢮⣻⡜⣧⣻⡵⣻⡜⣮⣓⢯⡞⣵⢣⢏⡽
⢦⡙⠦⡙⣎⡳⢎⡳⣞⡹⢎⡵⣭⠲⣍⢳⣣⢏⡷⢻⣼⢣⡟⣭⡳⣝⢮⡳⣭⢳⣭⣳⢻⣿⣟⢶⣛⢮⣛⢾⣳⢯⣟⣾⢣⠿⣽⢞⡶⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣻⣟⣷⣻⢿⡷⣾⡝⣯⢾⡱⣏⣾⣽⡿⣋⣼⣿⣿⣿⣿⡿⣽⡻⢷⣯⢿⡽⣞⣷⣫⢟⣳⢯⣻⣼⢻⣽⡺⣽⣯⢷⣛⡧⣷⢫⡷⣹⢧⣛⢮⡝⣮⢻⡜⢶
⣄⠹⢤⢹⡸⣉⢏⡡⢇⡹⡌⡧⢇⠿⣈⢧⡈⢿⣸⢿⡸⣇⠿⣤⢹⡌⣇⢧⡸⢏⣤⣉⠏⣿⣿⡈⡿⣌⣹⣌⡹⣇⠿⣌⣿⣹⣼⣉⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢧⣿⣿⣼⡿⣏⡿⣧⢿⣸⣇⡿⣼⣿⡏⣤⣿⣿⣿⣿⣿⣿⣹⢧⡿⡿⣼⢏⣹⡼⣤⣏⢿⡸⣏⣧⡼⣿⣤⢿⣇⡏⣿⣹⢿⡼⣹⢧⡏⣼⡹⣼⢹⡌⣧⢹⢇
⢆⠣⢎⡷⣱⡭⣶⡹⣎⡵⣙⢾⡹⢎⡝⡲⣭⢳⡝⣮⠷⣭⢻⡜⡿⣼⡹⢮⣝⢫⡖⣯⢛⣽⣿⡧⣝⢾⡱⣞⡵⣫⣏⡟⣶⣛⠶⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣳⣿⣻⡽⣯⣟⡽⣯⣷⣾⡿⣟⣳⣾⣿⣿⣿⣿⣿⣿⣳⣿⢯⡿⣽⢯⣟⡷⣻⢳⣞⢯⡳⣽⢺⡽⢧⣛⡯⢾⡽⣧⣛⢮⢿⣵⡻⣞⡵⢯⣳⢏⡾⣵⢫⠞
⢎⡱⢫⡞⡵⣛⡴⣛⢶⢳⡭⣞⡱⣋⢼⡱⣭⢳⢞⣵⢻⡜⣧⢏⡷⣣⢟⡳⣎⢯⡝⣮⣛⡼⣿⣿⣜⢧⡻⣜⡳⣏⢷⡻⣷⠭⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣻⣾⡽⣞⣷⣻⢷⣯⢿⣿⡿⣞⢿⣵⣿⣿⣿⣿⣿⣿⣿⢷⣻⣽⣯⢿⣳⣟⣮⢷⣯⣻⢼⣳⢻⣞⣧⢿⣹⢧⡟⣯⢞⡵⣯⣛⡞⣶⡹⢧⣻⢯⡗⣯⢳⡝⣎⡻
⡎⡵⢣⡝⡼⡱⢎⡝⣎⣳⠞⡴⢣⣝⡮⠵⣎⡟⣮⡝⣧⡟⣮⢻⣜⢧⣏⢷⡹⢶⡹⢶⡹⣼⡹⣿⣿⣎⡵⣏⣷⡻⣎⢷⢏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣽⣻⡽⣾⣽⡿⣾⣟⡷⢯⣽⣾⣿⣿⣿⣿⣿⣿⣿⢿⣻⣯⣷⣟⡿⣽⢾⣽⣻⢞⣽⣳⢯⣟⣮⡝⣯⢯⣷⣻⣼⢫⣞⣷⡹⣞⣵⣛⣧⡟⣮⢽⣎⣷⣹⢎⡷
⠽⣙⢏⡾⣱⢏⡻⣼⠧⣏⡻⣜⢳⠺⣭⢻⢼⡹⣖⡿⣽⣻⣼⣛⡮⣗⡞⣧⣛⢧⣛⢧⣟⢶⣻⡽⣿⣿⡜⣵⣣⢟⡽⢮⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣿⣿⣿⣳⢿⣽⣳⣿⣿⣿⢯⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡿⣯⣟⣷⣻⣟⣯⢿⣾⣯⢿⡾⣽⣻⢾⣼⣻⣞⢿⣞⡵⣯⡗⣯⢞⡷⢯⡶⣛⣶⢻⡽⣳⢻⢾⡽⣺⡝
⢣⡝⣎⢶⣙⢮⣝⢧⡻⣜⡱⣝⢮⣻⡜⢧⢎⠷⣹⠞⣵⡻⢮⣳⣝⢮⣝⡶⣩⣞⡽⣎⡞⣧⢻⡽⣯⢿⣿⣶⡹⣎⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣹⣿⣷⣏⣾⣳⣿⡟⣯⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢯⣿⣟⣿⣞⣷⣿⡾⣯⣟⡿⣯⢿⣽⢯⣿⣽⣳⢯⣟⡾⣽⣳⣟⢮⣻⣼⣻⣷⣟⡾⣯⣳⢭⣛⢮⡗⣧⣛
⢣⠞⣜⣣⢏⡾⣜⢯⡳⣎⢷⣫⢞⡵⣛⢮⡞⣽⡳⣟⡾⣽⣏⠷⣯⣛⠾⣝⡳⣮⢷⡹⣼⡹⣧⢿⡹⣏⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣫⢟⡿⣛⢯⢟⡾⣳⢿⣿⣮⣷⣽⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣯⢿⣿⣻⢾⡽⣯⣟⡾⣿⣽⢯⣟⡿⣿⢾⣟⣷⣿⣯⣟⡾⣽⣳⣟⡾⣏⡷⣞⣷⣻⢿⣽⢳⣏⡟⠾⣭⢟⣶⢫
⢣⠞⡴⣹⠾⣽⡺⣭⣳⡽⣫⡞⣽⢺⡝⣮⡝⣶⢻⣭⢻⠷⣯⢟⣳⢯⡟⣯⢷⣯⣟⢿⣱⡽⢾⡿⣽⣭⢻⡽⣯⢟⣿⣿⣿⣿⣿⡿⣽⣻⠼⣯⢷⡹⣯⢾⣽⡹⣏⢿⣿⡿⢿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣯⣟⡿⣾⡽⣯⢿⣽⢾⣿⣻⢿⣿⣻⣿⢿⣿⣯⣿⣞⡷⣯⣟⣷⢿⣾⣱⢯⡽⣿⢾⣽⣯⣿⢿⡼⣹⣟⡬⢯⡜⣧
⣣⢛⡜⣧⣟⣳⢿⡵⣏⡾⣱⣛⣮⢷⣛⡶⣽⢣⡿⣜⣯⢿⡽⣾⡽⣮⡝⣾⣧⠷⣞⣯⡗⣯⢿⣿⣳⣞⢯⡿⣽⢮⣿⡽⢯⣿⠾⣽⣳⣏⢿⣺⣭⢿⡽⣯⢶⣻⣜⣳⣮⣽⡳⣧⣻⣿⣿⣿⣿⣿⣿⣿⣻⢾⣽⣷⣟⡿⣷⢿⣟⣿⣞⣿⣞⣿⡿⣟⣿⣽⡿⣯⣷⣿⣾⣿⣷⣻⣞⡿⣾⡽⣯⣷⣻⣿⣿⣞⣯⣟⣞⣳⢮⡝⣧⠻⣜
⣥⢋⡞⣧⢻⡝⣯⣞⡽⣳⢧⢻⡼⣏⢷⡹⣞⢯⡳⣏⣾⢻⣟⣳⢿⣱⢏⡷⣏⣿⡽⣷⣫⣽⣻⢯⣷⢯⣻⡼⣯⢷⣫⣟⡿⣜⣿⣱⢿⠾⣯⠷⣞⣯⢿⣽⡳⣏⢾⡱⣟⣶⢻⣳⢏⣾⣻⢿⣿⣿⣿⢷⣯⣿⢿⣾⣻⣽⣟⣯⢿⣽⣿⢯⣿⣿⣿⣟⣿⣯⣿⣟⣿⣾⢷⣻⣿⡽⣯⣽⡳⣿⣽⣻⣽⣿⣯⣿⣟⣾⣭⡟⣾⢹⡞⡽⣞
⢆⠯⣜⢮⡳⣏⢷⡹⣞⡵⣫⢷⡽⣞⣳⡟⡼⣣⢿⡽⣺⢷⡾⡽⣯⣟⣾⣽⢻⣞⡿⢯⡷⣹⢯⣿⣿⣏⣷⢻⣽⡻⣗⣮⡝⣯⠞⡽⣎⡿⣼⣻⣝⡾⣻⣞⡵⣻⢎⡷⣹⢎⣯⢷⣻⢞⡷⣾⣟⣿⢯⣿⣟⣾⣿⢿⣿⣿⣿⣿⣿⣻⣾⣿⣷⡿⣟⣯⣿⣻⣿⡽⣿⢯⣿⣻⢷⣻⢷⣯⣿⣽⣷⣿⣿⣿⣿⣿⣿⣟⣶⡻⣧⣻⣜⡳⣭
⢎⡳⣬⢷⣹⢮⣏⣷⣹⡼⣽⣳⡝⡾⣝⢯⣳⢭⡟⣷⢯⣻⢽⣳⣟⡾⣽⣞⣻⢾⣽⣻⣼⢻⣟⡾⣿⡞⣽⢧⢾⡽⣗⢯⣻⡝⣿⣽⣻⣼⢳⣏⡾⣵⡻⢮⣳⡝⣯⠾⣵⢿⣮⣳⢯⣯⢟⣷⣻⣾⣟⣷⣿⣿⣾⡿⣟⣾⣿⣽⣿⣿⣯⣿⣿⣟⣿⣟⣾⣿⣽⡿⣯⢿⣽⣻⣯⣟⣯⢿⣳⢯⣿⡽⣿⣾⣿⣿⣿⣾⣳⣟⡷⡷⣎⣷⣹
⡎⡴⢫⣏⣟⣻⣽⣛⢯⡿⣝⣷⣫⡽⣞⢧⡟⣧⢿⣹⣞⣧⢿⣻⣞⣽⣳⢯⣻⣟⣞⣳⣭⣟⡾⣽⣷⣻⣭⣟⢷⣻⣭⣟⣧⣟⣷⣞⡷⣞⣻⠾⣵⢯⡟⣽⡳⣝⢮⣟⣭⢷⢾⣹⣟⣮⡟⣾⡿⣞⣿⣟⣾⡿⣷⣿⢿⣿⣾⣟⣾⣿⣽⣿⣿⣿⡿⣿⣯⣿⣞⣿⣿⣻⣞⣯⢷⣻⣞⣯⣟⣿⣯⣿⣿⣿⣿⣿⣿⣿⡷⣏⢷⣹⣗⡮⢷
]]

local failed = 0
local warning = 0
local success = 0

local totalRegistered = 0

local IS_LUVIT = bit and true or false
bit32 = bit32 or bit

local function test(testName, callback)
    totalRegistered = totalRegistered + 1

    local ran, state, reason = pcall(callback)

    if not ran then
        failed = failed + 1
    elseif ran and state ~= nil then
        if state and reason then
            warning = warning + 1
            print("⚠️ " .. testName .. (reason and ": " .. reason or ""))
        elseif state and not reason then
            success = success + 1
            print("✅ " .. testName)
        else
            failed = failed + 1
            print("❌ " .. testName .. (reason and ": " .. reason or ""))
        end
    end
end

local function expect(func, ignoreFirst, ...)
    ignoreFirst = ignoreFirst or 0

    local expected = { ... }
    local freturns = { func() }

    local didntReturn = {}

    if #expected >= #freturns - ignoreFirst then
        return true
    else
        for i = ignoreFirst + 1, #expected do
            if freturns[i] == nil then
                table.insert(didntReturn, expected[i])
            end
        end
    end

    return false, table.concat(didntReturn, ", ")
end

local function triLinii()
    print(string.rep("-", 100))
    print(string.rep("-", 100))
    print(string.rep("-", 100))
end

task = task or {
    -- THIS IS FOR LUVIT ONLY
    wait = function(num)
        local start = os.time()
        repeat until os.time() >= start + num
    end
}

print(MAOZEDONG)
print("Running the Communist Naming Convention...")

task.wait(5)

triLinii()

local CONSTANTS = {
    functionNonexistent = "Function does not exist at all",
    didNotReturn = "Function did not return additional parameters but otherwise still worked: "
}

test("prin", function()
    if prin and pcall(prin) then
        if prin == print then return true, "prin address is same as the regular print address" end

        return true
    else
        return false, CONSTANTS.functionNonexistent
    end
end)

test("identifyexecutor", function()
    if not identifyexecutor then return false, CONSTANTS.functionNonexistent end

    local _, reason = expect(identifyexecutor, 1, "version")
    return true, CONSTANTS.didNotReturn .. reason
end)

local percentage = math.floor((success / totalRegistered) * 100)

print(); print();

print(string.format("%s the Communist Naming Convention, CNC, with %s%% (%s out of %s%s)",
    percentage < 50 and "😡 Failed" or "🥳 Passed", percentage, success,
    totalRegistered, warning > 0 and (", " .. warning .. " warnings") or ""))

print(); print();

print("Made by Richy-Z (https://richy.lol)")

print(); print();

print(tostring(math.random(12, 16)) .. " months in a year huzz")
print("SUNČ NUEMELONNN 🍉")
print(string.rep("🍉", math.random(1, 16)))
print(bit32.lshift(math.random(22332, 999934), 33))
